{"ast":null,"code":"var _jsxFileName = \"D:\\\\web\\\\textin-app\\\\src\\\\contexts\\\\userContext.js\";\nimport React, { Component, createContext } from 'react';\nimport io from \"socket.io-client\";\nimport { v4 as uuidv4 } from 'uuid';\n\nrequire(\"dotenv\").config();\n\nexport const UserContext = /*#__PURE__*/createContext();\n\nclass UserContextProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDate = (nam, val) => {\n      this.setState({\n        [nam]: val\n      });\n    };\n\n    this.clearDetail = () => {\n      this.setState({\n        id: \"\",\n        user: {},\n        messages: [],\n        middleFlag: false,\n        receiver: {},\n        cnt: 0,\n        msgBody: \"\",\n        seenUpdateMessages: [],\n        onlineBottom: false,\n        Bottom: false,\n        word: '',\n        arrMsg: '',\n        arrPos: '',\n        arrId: '',\n        tog: true,\n        data: true,\n        cntifup: 0,\n        withDate: false,\n        start: '',\n        end: '',\n        mainLoading: true\n      });\n    };\n\n    this.updateDetail = user => {\n      this.setState({\n        id: user._id,\n        user: user,\n        messages: [],\n        middleFlag: false,\n        receiver: {},\n        cnt: 0,\n        msgBody: \"\",\n        seenUpdateMessages: [],\n        onlineBottom: false,\n        Bottom: false,\n        word: '',\n        arrMsg: '',\n        arrPos: '',\n        arrId: '',\n        tog: true,\n        data: true,\n        cntifup: 0,\n        withDate: false,\n        start: '',\n        end: '',\n        mainLoading: true\n      });\n    };\n\n    this.updatemainLoading = value => {\n      this.setState({\n        mainLoading: value\n      });\n    };\n\n    this.updatecntifup = () => {\n      this.setState({\n        cntifup: 0\n      });\n    };\n\n    this.updateData = val => {\n      this.setState({\n        data: val\n      });\n    };\n\n    this.updateDate = () => {\n      this.setState({\n        withDate: !this.state.withDate\n      });\n    };\n\n    this.updateSearch = () => {\n      this.setState({\n        tog: true,\n        arrId: [],\n        arrMsg: [],\n        arrPos: [],\n        word: '',\n        withDate: false\n      });\n    };\n\n    this.updateTog = () => {\n      this.setState({\n        tog: !this.state.tog,\n        arrId: [],\n        arrMsg: [],\n        arrPos: [],\n        word: ''\n      });\n    };\n\n    this.updateRight = e => {\n      const name = e.target.name;\n      const value = e.target.value;\n      this.setState({ ...this.state,\n        [name]: value,\n        data: false\n      });\n    };\n\n    this.updateRes = val => {\n      this.setState({\n        arrId: val.arrId,\n        arrPos: val.arrPos,\n        arrMsg: val.arrMsg\n      });\n    };\n\n    this.updateId = user => {\n      this.setState({\n        id: user.id,\n        username: user.username\n      });\n    };\n\n    this.updateBottom = value => {\n      this.setState({\n        Bottom: value\n      });\n    };\n\n    this.onlineBottomUpdate = value => {\n      this.setState({\n        onlineBottom: value\n      });\n    };\n\n    this.updatecnt = cnt => {\n      this.setState({\n        cnt: cnt\n      });\n    };\n\n    this.scrollUpdate = messagesw => {\n      this.setState(state => {\n        var messages = state.messages.map(chat => {\n          if (chat.Id === state.receiver._id) {\n            return {\n              Id: chat.Id,\n              username: chat.username,\n              path: chat.path,\n              isOnline: chat.isOnline,\n              lastSeen: chat.lastSeen,\n              status: chat.status,\n              isTyping: chat.isTyping,\n              messages: [...messagesw, ...chat.messages]\n            };\n          } else {\n            return chat;\n          }\n        });\n        return {\n          messages\n        };\n      });\n    };\n\n    this.updateUserDetail = detail => {\n      this.setState({\n        user: detail\n      });\n      this.socketDp.emit(\"detailUpdate\", this.state.user);\n    };\n\n    this.socketOn = () => {\n      const point = process.env.REACT_APP_BACKEND_URL;\n      const pointOnline = point + 'socketOnline';\n      this.socketOnline = io(pointOnline);\n      const pointDelivered = point + 'socketDelivered';\n      this.socketDelivered = io(pointDelivered);\n      const pointTyping = point + 'socketTyping';\n      this.socketTyping = io(pointTyping);\n      const pointSeen = point + 'socketSeen';\n      this.socketSeen = io(pointSeen);\n      const pointDp = point + 'socketDp';\n      this.socketDp = io(pointDp);\n      const pointPost = point + 'socketPost';\n      this.socketPost = io(pointPost);\n      this.socketPost.emit(\"join\", {\n        id: this.state.id\n      });\n      this.socketDp.emit(\"join\", {\n        id: this.state.id\n      });\n      this.socketSeen.emit(\"join\", {\n        id: this.state.id\n      });\n      this.socketTyping.emit(\"join\", {\n        id: this.state.id\n      });\n      this.socketDelivered.emit(\"join\", {\n        id: this.state.id\n      });\n      this.socketOnline.emit(\"join\", {\n        id: this.state.id\n      });\n      this.socketOnline.on(\"chat\", function (chat, loading) {\n        if (chat !== null) {\n          addChats(chat);\n        }\n\n        if (!loading) {\n          loadingDone();\n        }\n      });\n\n      const loadingDone = () => {\n        this.setState({\n          mainLoading: false\n        });\n      };\n\n      const addChats = chat => {\n        chat.messages.map(msg => {\n          if (!msg.delivered && msg.senderId !== this.state.user._id) {\n            msg.delivered = true;\n            this.socketDelivered.emit(\"deliverUpdate\", msg);\n          }\n\n          return 0;\n        });\n        this.setState({\n          messages: [...this.state.messages, { ...chat,\n            isTyping: false\n          }]\n        });\n      };\n\n      this.socketTyping.on(\"isTypingUpdate\", function (data) {\n        isTypingUpdate(data, true);\n      });\n      this.socketTyping.on(\"isTypingEndUpdate\", function (data) {\n        isTypingUpdate(data, false);\n      });\n\n      const isTypingUpdate = (data, value) => {\n        var messages = [];\n\n        if (this.state.receiver._id === data.id) {\n          this.setState({\n            receiver: {\n              _id: this.state.receiver._id,\n              isTyping: value,\n              username: this.state.receiver.username,\n              path: this.state.receiver.path,\n              isOnline: this.state.receiver.isOnline,\n              status: this.state.receiver.status,\n              lastSeen: this.state.receiver.lastSeen\n            }\n          });\n        }\n\n        this.setState(state => {\n          messages = state.messages.map(chat => {\n            if (chat.Id === data.id) {\n              return {\n                Id: chat.Id,\n                username: chat.username,\n                isTyping: value,\n                path: chat.path,\n                isOnline: chat.isOnline,\n                lastSeen: chat.lastSeen,\n                status: chat.status,\n                messages: chat.messages\n              };\n            } else {\n              return { ...chat\n              };\n            }\n          });\n          return {\n            messages\n          };\n        });\n      };\n\n      this.socketDp.on(\"addDetailUpdate\", function (data) {\n        addDetailUpdate(data);\n      });\n\n      const addDetailUpdate = data => {\n        var messages = [];\n\n        if (this.state.user._id === data._id) {\n          this.setState({\n            user: { ...this.state.user,\n              path: data.path,\n              status: data.status\n            }\n          });\n        }\n\n        if (this.state.receiver._id === data._id) {\n          this.setState({\n            receiver: {\n              _id: this.state.receiver._id,\n              isTyping: this.state.receiver.isTyping,\n              username: this.state.receiver.username,\n              path: data.path,\n              isOnline: this.state.receiver.isOnline,\n              status: data.status,\n              lastSeen: this.state.receiver.lastSeen\n            }\n          });\n        }\n\n        this.setState(state => {\n          messages = state.messages.map(chat => {\n            if (chat.Id === data._id) {\n              return {\n                Id: chat.Id,\n                username: chat.username,\n                isTyping: chat.isTyping,\n                path: data.path,\n                isOnline: chat.isOnline,\n                lastSeen: chat.lastSeen,\n                status: data.status,\n                messages: chat.messages\n              };\n            } else {\n              return { ...chat\n              };\n            }\n          });\n          return {\n            messages\n          };\n        });\n      };\n\n      this.socketOnline.on(\"isOnline\", function (data) {\n        onlineUpdate(data);\n      });\n\n      const onlineUpdate = data => {\n        var messages = [];\n\n        if (this.state.receiver._id === data.id) {\n          this.setState({\n            receiver: {\n              _id: this.state.receiver._id,\n              isTyping: this.state.receiver.isTyping,\n              username: this.state.receiver.username,\n              path: this.state.receiver.path,\n              isOnline: true,\n              status: this.state.receiver.status,\n              lastSeen: this.state.receiver.lastSeen\n            }\n          });\n        }\n\n        this.setState(state => {\n          messages = state.messages.map(chat => {\n            if (chat.Id === data.id) {\n              return {\n                Id: chat.Id,\n                username: chat.username,\n                path: chat.path,\n                isOnline: true,\n                lastSeen: chat.lastSeen,\n                status: chat.status,\n                messages: chat.messages,\n                isTyping: chat.isTyping\n              };\n            } else {\n              return { ...chat\n              };\n            }\n          });\n          return {\n            messages\n          };\n        });\n      };\n\n      this.socketOnline.on(\"lastSeen\", function (data) {\n        lastSeenUpdate(data);\n      });\n\n      const lastSeenUpdate = data => {\n        var messages = [];\n\n        if (this.state.receiver._id === data.id) {\n          this.setState({\n            receiver: {\n              _id: this.state.receiver._id,\n              username: this.state.receiver.username,\n              isTyping: this.state.receiver.isTyping,\n              path: this.state.receiver.path,\n              isOnline: false,\n              status: this.state.receiver.status,\n              lastSeen: data.lastSeen\n            }\n          });\n        }\n\n        this.setState(state => {\n          messages = state.messages.map(chat => {\n            if (chat.Id === data.id) {\n              return {\n                Id: chat.Id,\n                username: chat.username,\n                path: chat.path,\n                isTyping: chat.isTyping,\n                isOnline: false,\n                lastSeen: chat.lastSeen,\n                status: chat.status,\n                messages: chat.messages\n              };\n            } else {\n              return { ...chat\n              };\n            }\n          });\n          return {\n            messages\n          };\n        });\n      };\n\n      this.socketPost.on(\"receivingMessage\", function (newmsg) {\n        addmessage(newmsg);\n      });\n      this.socketPost.on(\"sentMessageSuccess\", function (msg) {\n        sentUpdate(msg);\n      });\n      this.socketDelivered.on(\"deliverSuccess\", function (msg) {\n        deliverUpdate(msg);\n      });\n      this.socketSeen.on(\"seenSuccess\", function (msg) {\n        seenUpdate(msg);\n      });\n      this.socketPost.on(\"postingMessgaeDevices\", function (msg) {\n        MessagePostedFromOtherDevices(msg);\n      });\n\n      const MessagePostedFromOtherDevices = msg => {\n        var flag = false;\n        var t = {};\n        var messages = [];\n        this.state.messages.map(chat => {\n          if (chat.Id === msg.receiverId) {\n            if (chat.messages[chat.messages.length - 1].id !== msg.id) {\n              flag = true;\n              t = {\n                Id: chat.Id,\n                username: chat.username,\n                path: chat.path,\n                isTyping: chat.isTyping,\n                isOnline: chat.isOnline,\n                lastSeen: chat.lastSeen,\n                status: chat.status,\n                messages: [...chat.messages, msg]\n              };\n            }\n          } else {\n            messages.push(chat);\n          }\n\n          return 0;\n        });\n\n        if (flag) {\n          messages = [t, ...messages];\n          this.setState({\n            messages: messages\n          });\n        }\n      };\n\n      const seenUpdate = msg => {\n        var messages = [];\n        this.setState(state => {\n          messages = state.messages.map(chat => {\n            if (chat.Id === msg.receiverId) {\n              return {\n                Id: chat.Id,\n                username: chat.username,\n                path: chat.path,\n                isTyping: chat.isTyping,\n                isOnline: chat.isOnline,\n                lastSeen: chat.lastSeen,\n                status: chat.status,\n                messages: chat.messages.map(message => {\n                  if (msg.id === message.id) {\n                    return {\n                      sentTime: message.sentTime,\n                      id: message.id,\n                      sent: message.sent,\n                      delivered: message.delivered,\n                      seen: true,\n                      msgBody: message.msgBody,\n                      receiverId: message.receiverId,\n                      senderId: message.senderId\n                    };\n                  } else {\n                    return { ...message\n                    };\n                  }\n                })\n              };\n            } else {\n              return { ...chat\n              };\n            }\n          });\n          return {\n            messages\n          };\n        });\n      };\n\n      const deliverUpdate = msg => {\n        var messages = [];\n        this.setState(state => {\n          messages = state.messages.map(chat => {\n            if (chat.Id === msg.receiverId) {\n              return {\n                Id: chat.Id,\n                username: chat.username,\n                path: chat.path,\n                isTyping: chat.isTyping,\n                isOnline: chat.isOnline,\n                lastSeen: chat.lastSeen,\n                status: chat.status,\n                messages: chat.messages.map(message => {\n                  if (msg.id === message.id) {\n                    return {\n                      sentTime: message.sentTime,\n                      id: message.id,\n                      sent: message.sent,\n                      delivered: true,\n                      seen: message.seen,\n                      msgBody: message.msgBody,\n                      receiverId: message.receiverId,\n                      senderId: message.senderId\n                    };\n                  } else {\n                    return { ...message\n                    };\n                  }\n                })\n              };\n            } else {\n              return { ...chat\n              };\n            }\n          });\n          return {\n            messages\n          };\n        });\n      };\n\n      const sentUpdate = msg => {\n        var messages = [];\n        this.setState(state => {\n          messages = state.messages.map(chat => {\n            if (chat.Id === msg.receiverId) {\n              return {\n                Id: chat.Id,\n                username: chat.username,\n                path: chat.path,\n                isTyping: chat.isTyping,\n                isOnline: chat.isOnline,\n                lastSeen: chat.lastSeen,\n                status: chat.status,\n                messages: chat.messages.map(message => {\n                  if (msg.id === message.id) {\n                    return {\n                      sentTime: message.sentTime,\n                      id: message.id,\n                      sent: true,\n                      delivered: message.delivered,\n                      seen: message.seen,\n                      msgBody: message.msgBody,\n                      receiverId: message.receiverId,\n                      senderId: message.senderId\n                    };\n                  } else {\n                    return { ...message\n                    };\n                  }\n                })\n              };\n            } else {\n              return { ...chat\n              };\n            }\n          });\n          return {\n            messages\n          };\n        });\n      };\n\n      const addmessage = newmsg => {\n        var messages = [];\n        var temp = {};\n        let bflag = false;\n        this.setState(state => {\n          if (state.messages.length === 0) {\n            newmsg.msg.delivered = true;\n            messages = [{\n              Id: newmsg.msg.senderId,\n              username: newmsg.username,\n              isTyping: false,\n              path: newmsg.path,\n              isOnline: newmsg.isOnline,\n              status: newmsg.status,\n              lastSeen: newmsg.lastSeen,\n              messages: [newmsg.msg]\n            }, ...state.messages];\n            this.socketDelivered.emit(\"deliverUpdate\", newmsg.msg);\n          } else {\n            let flag = true;\n            state.messages.map(item => {\n              if (item.Id === newmsg.msg.senderId) {\n                flag = false;\n\n                if (newmsg.msg.receiverId === state.id && !newmsg.msg.delivered) {\n                  newmsg.msg.delivered = true;\n                  this.socketDelivered.emit(\"deliverUpdate\", newmsg.msg);\n\n                  if (state.receiver._id === newmsg.msg.senderId) {\n                    this.setState({\n                      cnt: state.cnt + 1\n                    });\n                    const container = document.getElementById(\"chatScroll\");\n                    if (container.scrollHeight - container.scrollTop === container.offsetHeight) bflag = true;else {\n                      this.setState({\n                        cntifup: state.cntifup + 1\n                      });\n                    }\n                  }\n                }\n\n                temp = {\n                  Id: item.Id,\n                  username: item.username,\n                  path: item.path,\n                  isOnline: newmsg.isOnline,\n                  lastSeen: item.lastSeen,\n                  isTyping: item.isTyping,\n                  status: item.status,\n                  messages: [...item.messages, newmsg.msg]\n                };\n              } else {\n                messages.push(item);\n              }\n\n              return 0;\n            });\n\n            if (flag) {\n              newmsg.msg.delivered = true;\n              messages = [{\n                Id: newmsg.msg.senderId,\n                username: newmsg.username,\n                path: newmsg.path,\n                isTyping: false,\n                isOnline: newmsg.isOnline,\n                lastSeen: newmsg.lastSeen,\n                status: newmsg.status,\n                messages: [newmsg.msg]\n              }, ...state.messages];\n              this.socketDelivered.emit(\"deliverUpdate\", newmsg.msg);\n            } else {\n              messages = [temp, ...messages];\n            }\n          }\n\n          return {\n            messages\n          };\n        });\n        if (bflag) this.setState({\n          Bottom: true\n        });\n      };\n    };\n\n    this.postmessage = () => {\n      let msgid = uuidv4();\n      const sentTime = new Date();\n      var newMessage = {\n        id: msgid,\n        senderId: this.state.id,\n        receiverId: this.state.receiver._id,\n        msgBody: this.state.msgBody,\n        sentTime: sentTime,\n        sent: false,\n        delivered: false,\n        seen: false\n      };\n      var newmsg = {\n        id: msgid,\n        senderId: this.state.id,\n        receiverId: this.state.receiver._id,\n        msgBody: this.state.msgBody,\n        senderUsername: this.state.user.username,\n        senderPath: this.state.user.path,\n        senderLastSeen: this.state.user.lastSeen,\n        senderStatus: this.state.user.status,\n        senderisOnline: true,\n        sentTime: sentTime,\n        sent: false,\n        delivered: false,\n        seen: false\n      };\n      this.socketPost.emit(\"postingMessage\", newmsg);\n      this.setState(state => {\n        var messages = [];\n        var temp = {};\n\n        if (state.messages.length === 0) {\n          messages = [{\n            Id: newMessage.receiverId,\n            username: state.receiver.username,\n            path: state.receiver.path,\n            isTyping: this.state.receiver.isTyping,\n            isOnline: state.receiver.isOnline,\n            status: state.receiver.status,\n            lastSeen: state.receiver.lastSeen,\n            messages: [newMessage]\n          }];\n        } else {\n          let flag = true;\n          state.messages.map(item => {\n            if (item.Id === newMessage.receiverId) {\n              flag = false;\n              temp = {\n                Id: item.Id,\n                username: item.username,\n                path: item.path,\n                isTyping: item.isTyping,\n                isOnline: item.isOnline,\n                status: item.status,\n                lastSeen: item.lastSeen,\n                messages: [...item.messages, newMessage]\n              };\n            } else {\n              messages.push(item);\n            }\n\n            return 0;\n          });\n\n          if (flag) {\n            messages = [{\n              Id: newMessage.receiverId,\n              username: state.receiver.username,\n              isTyping: false,\n              isOnline: state.receiver.isOnline,\n              path: state.receiver.path,\n              status: state.receiver.status,\n              lastSeen: state.receiver.lastSeen,\n              messages: [newMessage]\n            }, ...state.messages];\n          } else {\n            messages.unshift(temp);\n          }\n        }\n\n        return {\n          messages,\n          msgBody: \"\"\n        };\n      });\n    };\n\n    this.changeMsgBody = newmsgBody => {\n      this.setState({\n        msgBody: newmsgBody\n      });\n      this.socketTyping.emit(\"isTyping\", {\n        rid: this.state.receiver._id,\n        uid: this.state.user._id\n      });\n    };\n\n    this.seenInContext = id => {\n      var messages = [];\n      this.setState(state => {\n        messages = state.messages.map(chat => {\n          if (chat.Id === id) {\n            return {\n              Id: chat.Id,\n              username: chat.username,\n              path: chat.path,\n              isTyping: chat.isTyping,\n              isOnline: chat.isOnline,\n              status: chat.status,\n              lastSeen: chat.lastSeen,\n              messages: chat.messages.map(message => {\n                if (!message.seen && message.senderId === id) {\n                  return {\n                    sentTime: message.sentTime,\n                    id: message.id,\n                    sent: message.sent,\n                    delivered: message.delivered,\n                    seen: true,\n                    msgBody: message.msgBody,\n                    receiverId: message.receiverId,\n                    senderId: message.senderId\n                  };\n                } else {\n                  return { ...message\n                  };\n                }\n              })\n            };\n          } else {\n            return { ...chat\n            };\n          }\n        });\n        return {\n          messages\n        };\n      });\n    };\n\n    this.seenOnRoom = msg => {\n      this.socketSeen.emit(\"seenUpdate\", msg);\n    };\n\n    this.currentUserUpdate = details => {\n      var messages = [];\n\n      if (this.state.receiver !== {} && details._id !== this.state.receiver._id) {\n        this.setState(state => {\n          messages = state.messages.map(chat => {\n            if (chat.Id === state.receiver._id) {\n              return {\n                Id: chat.Id,\n                username: chat.username,\n                path: chat.path,\n                isTyping: chat.isTyping,\n                isOnline: chat.isOnline,\n                status: chat.status,\n                lastSeen: chat.lastSeen,\n                messages: chat.messages.map(message => {\n                  if (!message.seen && message.senderId === state.receiver._id) {\n                    return {\n                      sentTime: message.sentTime,\n                      id: message.id,\n                      sent: message.sent,\n                      delivered: message.delivered,\n                      seen: true,\n                      msgBody: message.msgBody,\n                      receiverId: message.receiverId,\n                      senderId: message.senderId\n                    };\n                  } else {\n                    return { ...message\n                    };\n                  }\n                })\n              };\n            } else {\n              return { ...chat\n              };\n            }\n          });\n          return {\n            messages\n          };\n        });\n      }\n\n      this.setState({\n        receiver: details,\n        middleFlag: true,\n        msgBody: \"\"\n      });\n    };\n\n    this.typingEnd = () => {\n      this.socketTyping.emit(\"isTypingEnd\", {\n        rid: this.state.receiver._id,\n        uid: this.state.user._id\n      });\n    };\n\n    this.state = {\n      user: {},\n      id: \"\",\n      username: \"\",\n      middleFlag: false,\n      receiver: {},\n      messages: [],\n      cnt: 0,\n      msgBody: \"\",\n      seenUpdateMessages: [],\n      onlineBottom: false,\n      Bottom: false,\n      word: '',\n      arrMsg: '',\n      arrPos: '',\n      arrId: '',\n      tog: true,\n      data: true,\n      cntifup: 0,\n      withDate: false,\n      start: '',\n      end: '',\n      mainLoading: true\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(UserContext.Provider, {\n      value: { ...this.state,\n        updateDate: this.updateDate,\n        handleDate: this.handleDate,\n        updateDetail: this.updateDetail,\n        updatemainLoading: this.updatemainLoading,\n        typingEnd: this.typingEnd,\n        updatecntifup: this.updatecntifup,\n        updateUserDetail: this.updateUserDetail,\n        updateId: this.updateId,\n        updateSearch: this.updateSearch,\n        currentUserUpdate: this.currentUserUpdate,\n        changeMsgBody: this.changeMsgBody,\n        postmessage: this.postmessage,\n        seenOnRoom: this.seenOnRoom,\n        clearDetail: this.clearDetail,\n        offline: this.offline,\n        scrollUpdate: this.scrollUpdate,\n        socketOn: this.socketOn,\n        updateData: this.updateData,\n        updatecnt: this.updatecnt,\n        seenInContext: this.seenInContext,\n        updateBottom: this.updateBottom,\n        onlineBottomUpdate: this.onlineBottomUpdate,\n        updateRight: this.updateRight,\n        updateRes: this.updateRes,\n        updateTog: this.updateTog\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 776,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\n\nexport default UserContextProvider;","map":{"version":3,"sources":["D:/web/textin-app/src/contexts/userContext.js"],"names":["React","Component","createContext","io","v4","uuidv4","require","config","UserContext","UserContextProvider","constructor","props","handleDate","nam","val","setState","clearDetail","id","user","messages","middleFlag","receiver","cnt","msgBody","seenUpdateMessages","onlineBottom","Bottom","word","arrMsg","arrPos","arrId","tog","data","cntifup","withDate","start","end","mainLoading","updateDetail","_id","updatemainLoading","value","updatecntifup","updateData","updateDate","state","updateSearch","updateTog","updateRight","e","name","target","updateRes","updateId","username","updateBottom","onlineBottomUpdate","updatecnt","scrollUpdate","messagesw","map","chat","Id","path","isOnline","lastSeen","status","isTyping","updateUserDetail","detail","socketDp","emit","socketOn","point","process","env","REACT_APP_BACKEND_URL","pointOnline","socketOnline","pointDelivered","socketDelivered","pointTyping","socketTyping","pointSeen","socketSeen","pointDp","pointPost","socketPost","on","loading","addChats","loadingDone","msg","delivered","senderId","isTypingUpdate","addDetailUpdate","onlineUpdate","lastSeenUpdate","newmsg","addmessage","sentUpdate","deliverUpdate","seenUpdate","MessagePostedFromOtherDevices","flag","t","receiverId","length","push","message","sentTime","sent","seen","temp","bflag","item","container","document","getElementById","scrollHeight","scrollTop","offsetHeight","postmessage","msgid","Date","newMessage","senderUsername","senderPath","senderLastSeen","senderStatus","senderisOnline","unshift","changeMsgBody","newmsgBody","rid","uid","seenInContext","seenOnRoom","currentUserUpdate","details","typingEnd","render","offline","children"],"mappings":"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","sourcesContent":["import React, { Component,createContext } from 'react'\n\nimport io from \"socket.io-client\";\nimport { v4 as uuidv4 } from 'uuid';\nrequire(\"dotenv\").config();\n\nexport const UserContext = createContext()\n\nclass UserContextProvider extends Component {\n  \n   constructor(props)\n   {\n     super(props);\n     this.state={\n      user: {},\n      id:\"\",\n      username:\"\",\n      middleFlag:false,\n      receiver:{},\n      messages:[],\n      cnt:0,\n      msgBody:\"\",\n      seenUpdateMessages:[],\n      onlineBottom:false,\n      Bottom:false,\n      word:'',\n      arrMsg:'',\n      arrPos:'',\n      arrId:'',\n      tog:true,\n      data:true,\n      cntifup:0,\n\n      withDate:false,\n      start:'',\n      end:'',\n      mainLoading:true,\n\n   }\n\n \n}\nhandleDate=(nam,val)=>{\n  this.setState({[nam]:val});\n}\n\nclearDetail = () =>\n{\n  this.setState({id:\"\",user:{},messages:[],\n    middleFlag:false,\n    receiver:{},\n    cnt:0,\n    msgBody:\"\",\n    seenUpdateMessages:[],\n    onlineBottom:false,\n    Bottom:false,\n    word:'',\n    arrMsg:'',\n    arrPos:'',\n    arrId:'',\n    tog:true,\n    data:true,\n    cntifup:0,\n\n    withDate:false,\n    start:'',\n    end:'',\n    mainLoading:true,\n  })\n}\n\n\n   updateDetail = (user) =>\n   {\n     \n        this.setState({id:user._id,user:user,messages:[],\n          middleFlag:false,\n          receiver:{},\n          cnt:0,\n          msgBody:\"\",\n          seenUpdateMessages:[],\n          onlineBottom:false,\n          Bottom:false,\n          word:'',\n          arrMsg:'',\n          arrPos:'',\n          arrId:'',\n          tog:true,\n          data:true,\n          cntifup:0,\n    \n          withDate:false,\n          start:'',\n          end:'',\n          mainLoading:true,\n        })\n     \n   }   \n   updatemainLoading = (value) =>\n   {\n          this.setState({mainLoading:value})\n   }\n\n  updatecntifup = () =>\n  {\n    this.setState({cntifup:0});\n  }\nupdateData = (val)=>{\n  this.setState({ data:val})\n}\nupdateDate = ()=>{\n  this.setState({ withDate:!this.state.withDate})\n}\nupdateSearch=()=>{\n  \n  this.setState({ tog:true,arrId:[],arrMsg:[],arrPos:[],word:'',withDate:false})\n}\n\nupdateTog = () =>{\n  this.setState({ tog: !this.state.tog , arrId:[],arrMsg:[],arrPos:[],word:''})\n}\n\n   updateRight = e=>{\n    const name = e.target.name;\n    const value = e.target.value;\n    this.setState({ ...this.state, [name]: value, data: false });\n   }\n   updateRes = (val)=>{\n    this.setState({  arrId: val.arrId, arrPos: val.arrPos, arrMsg: val.arrMsg })\n   }\n\n   updateId = (user) =>\n   {\n     this.setState({id:user.id,username:user.username});\n   }\n\n   updateBottom = value =>\n   { \n           this.setState({Bottom:value})\n   }\n onlineBottomUpdate = (value) =>\n { \n   \n   this.setState({onlineBottom:value})\n }\n  updatecnt = (cnt) =>\n  { \n    this.setState({cnt:cnt})\n  }\n      \nscrollUpdate =(messagesw)=>\n   {  \n     this.setState(state=>{\n     var  messages = state.messages.map(chat=>{\n        if(chat.Id===state.receiver._id)\n        {  \n          return {Id:chat.Id,username:chat.username,path:chat.path, isOnline:chat.isOnline,lastSeen:chat.lastSeen,status:chat.status,isTyping:chat.isTyping,messages:[...messagesw,...chat.messages]}\n        }\n        else{\n          return chat\n        }\n      })\n      return{\n        messages,\n      }\n    })\n   }\n  updateUserDetail = (detail) =>\n  {\n    \n    \n    this.setState({user:detail});\n   \n    this.socketDp.emit(\"detailUpdate\",this.state.user);\n  \n   \n  }\n\n \n  socketOn = () =>{\n  const point = process.env.REACT_APP_BACKEND_URL;\n\n  \n  const pointOnline = point+'socketOnline'\n\n  this.socketOnline = io(pointOnline) \n\n  const pointDelivered = point+'socketDelivered' \n\n  this.socketDelivered = io(pointDelivered) \n\n  const pointTyping = point+'socketTyping' \n\n  this.socketTyping = io(pointTyping) \n\n  const pointSeen = point+'socketSeen' \n\n  this.socketSeen = io(pointSeen)\n\n  const pointDp = point+'socketDp' \n\n  this.socketDp =   io(pointDp)\n\n  const pointPost = point+'socketPost'\n\n  this.socketPost = io(pointPost) \n\n  this.socketPost.emit(\"join\",{id:this.state.id});\n\n  this.socketDp.emit(\"join\",{id:this.state.id});\n\n  this.socketSeen.emit(\"join\",{id:this.state.id});\n\n  this.socketTyping.emit(\"join\",{id:this.state.id});\n\n  this.socketDelivered.emit(\"join\",{id:this.state.id});\n\n   this.socketOnline.emit(\"join\",{id:this.state.id});\n   \n\n    this.socketOnline.on(\"chat\",function(chat,loading){\n\n      if(chat!==null)\n      {\n        addChats(chat);\n         \n\n      }\n       if(!loading)\n      {\n        loadingDone()\n        \n\n      }\n    }) \n\n\n     const loadingDone = () =>\n     {\n      this.setState({mainLoading:false})\n     }\n\n    const addChats =(chat) =>{\n      \n            chat.messages.map(msg=>{\n              if(!msg.delivered&&msg.senderId!==this.state.user._id)\n\n              {\n                msg.delivered=true;\n                this.socketDelivered.emit(\"deliverUpdate\", msg);\n              }\n              return 0;\n            })\n\n        \n    \n      this.setState({messages:[...this.state.messages,{...chat,isTyping:false}]})\n    }\n\n\n\n\n\n   \n  this.socketTyping.on(\"isTypingUpdate\",function(data){\n    isTypingUpdate(data,true);\n  })\n  this.socketTyping.on(\"isTypingEndUpdate\",function(data){\n    isTypingUpdate(data,false);\n  })\n  const isTypingUpdate = (data,value) =>\n  {\n           \n    var messages = [];\n    if(this.state.receiver._id===data.id)\n    { \n     \n      this.setState({receiver:{_id:this.state.receiver._id,isTyping:value,username:this.state.receiver.username,path:this.state.receiver.path,isOnline:this.state.receiver.isOnline,status:this.state.receiver.status,lastSeen:this.state.receiver.lastSeen}})\n    }\n  \n    this.setState(state =>{\n      \n      messages = state.messages.map(chat =>{\n        if(chat.Id === data.id)\n        {\n          return  {Id:chat.Id,username:chat.username,isTyping:value,path:chat.path, isOnline:chat.isOnline,lastSeen:chat.lastSeen,status:chat.status,messages:chat.messages}  \n         }\n        \n        else{\n          return {...chat}\n        }\n      })\n      \n        return {messages,}\n      \n    })\n  }\n    \n  \n\n \n    this.socketDp.on(\"addDetailUpdate\",function(data)\n    {\n      \n        addDetailUpdate(data);\n      \n    })\n  const addDetailUpdate = (data) =>\n  {\n    var messages = [];\n    if(this.state.user._id===data._id)\n    {\n      this.setState({user:{...this.state.user,path:data.path,status:data.status}})\n    }\n    if(this.state.receiver._id===data._id)\n    { \n      \n      this.setState({receiver:{_id:this.state.receiver._id,isTyping:this.state.receiver.isTyping,username:this.state.receiver.username,path:data.path,isOnline:this.state.receiver.isOnline,status:data.status,lastSeen:this.state.receiver.lastSeen}})\n    }\n   \n    this.setState(state =>{\n      \n      messages = state.messages.map(chat =>{\n        if(chat.Id === data._id)\n        {\n          return  {Id:chat.Id,username:chat.username,isTyping:chat.isTyping,path:data.path, isOnline:chat.isOnline,lastSeen:chat.lastSeen,status:data.status,messages:chat.messages}  \n         }\n        \n        else{\n          return {...chat}\n        }\n      })\n      \n        return {messages,}\n      \n    })\n  }\n    \n    this.socketOnline.on(\"isOnline\",function(data){\n       onlineUpdate(data)\n    })\n  const onlineUpdate  = (data) =>\n  {  \n    var messages = [];\n    if(this.state.receiver._id===data.id)\n    {\n      this.setState({receiver:{_id:this.state.receiver._id,isTyping:this.state.receiver.isTyping,username:this.state.receiver.username,path:this.state.receiver.path,isOnline:true,status:this.state.receiver.status,lastSeen:this.state.receiver.lastSeen}})\n    }\n    this.setState(state =>{\n      \n      messages = state.messages.map(chat =>{\n        if(chat.Id === data.id)\n        {\n          return  {Id:chat.Id,username:chat.username,path:chat.path, isOnline:true,lastSeen:chat.lastSeen,status:chat.status,messages:chat.messages,isTyping:chat.isTyping}  \n         }\n        \n        else{\n          return {...chat}\n        }\n      })\n      \n        return {messages,}\n      \n    })\n\n    \n  } \n  this.socketOnline.on(\"lastSeen\",function(data){\n      \n    lastSeenUpdate(data)\n    \n\n\n  })\n  const lastSeenUpdate = (data) =>\n  {  var messages = [];\n    if(this.state.receiver._id===data.id)\n    {\n      this.setState({receiver:{_id:this.state.receiver._id,username:this.state.receiver.username,isTyping:this.state.receiver.isTyping,path:this.state.receiver.path,isOnline:false,status:this.state.receiver.status,lastSeen:data.lastSeen}})\n    }\n    this.setState(state =>{\n      \n      messages = state.messages.map(chat =>{\n\n        if(chat.Id === data.id)\n        {\n          return  {Id:chat.Id,username:chat.username,path:chat.path,isTyping:chat.isTyping, isOnline:false,lastSeen:chat.lastSeen,status:chat.status,messages:chat.messages}  \n         }\n        \n        else{\n          return {...chat}\n        }\n      })\n      \n        return {messages,}\n      \n    })\n  }\n    \n    this.socketPost.on(\"receivingMessage\",function(newmsg){\n     addmessage(newmsg);\n      \n    });\n    this.socketPost.on(\"sentMessageSuccess\",function(msg){\n      \n       sentUpdate(msg);\n    })\n    this.socketDelivered.on(\"deliverSuccess\",function(msg){\n      \n      deliverUpdate(msg);\n   })\n   this.socketSeen.on(\"seenSuccess\",function(msg){\n     seenUpdate(msg)\n   })\n   this.socketPost.on(\"postingMessgaeDevices\",function(msg){\n    MessagePostedFromOtherDevices(msg)\n  })\n  const MessagePostedFromOtherDevices = (msg) =>\n  {\n    var flag = false\n    var t = {}\n    var messages = [];\n this.state.messages.map((chat)=>{\n        if(chat.Id===msg.receiverId)\n        {  \n          \n           \n          if(chat.messages[chat.messages.length-1].id!==msg.id)\n          {\n             flag = true;\n             t = {Id:chat.Id,username:chat.username,path:chat.path,isTyping:chat.isTyping, isOnline:chat.isOnline,lastSeen:chat.lastSeen,status:chat.status, messages:[...chat.messages,msg]}\n          }\n    \n        }\n        else{\n          messages.push(chat);\n        }\n    return 0;\n  })\n  if(flag)\n  { \n    messages = [t,...messages]\n    \n   this.setState({messages:messages});\n  }\n \n}\n   const seenUpdate = (msg) =>\n   {\n    var messages = [];\n    this.setState(state =>{\n      \n      messages = state.messages.map(chat =>{\n        if(chat.Id === msg.receiverId)\n        {\n          return  {Id:chat.Id,username:chat.username,path:chat.path,isTyping:chat.isTyping, isOnline:chat.isOnline,lastSeen:chat.lastSeen,status:chat.status,messages:chat.messages.map(message=>{\n             if(msg.id===message.id)\n             {\n               return {sentTime:message.sentTime,id:message.id,sent:message.sent,delivered:message.delivered,seen:true,msgBody:message.msgBody,receiverId:message.receiverId,senderId:message.senderId}\n             }  \n             else\n             {\n               return {...message}\n             }\n          }) \n         }\n        }\n        else{\n          return {...chat}\n        }\n      })\n      \n        return {messages,}\n      \n    })\n\n   }\n   \n   const deliverUpdate = (msg) =>\n   {\n    var messages = [];\n    this.setState(state =>{\n      \n      messages = state.messages.map(chat =>{\n        if(chat.Id === msg.receiverId)\n        {\n          return  {Id:chat.Id,username:chat.username,path:chat.path,isTyping:chat.isTyping, isOnline:chat.isOnline,lastSeen:chat.lastSeen,status:chat.status,messages:chat.messages.map(message=>{\n             if(msg.id===message.id)\n             {\n               return {sentTime:message.sentTime,id:message.id,sent:message.sent,delivered:true,seen:message.seen,msgBody:message.msgBody,receiverId:message.receiverId,senderId:message.senderId}\n             }  \n             else\n             {\n               return {...message}\n             }\n          }) \n         }\n        }\n        else{\n          return {...chat}\n        }\n      })\n      \n        return {messages,}\n      \n    })\n\n   }\n   const sentUpdate = (msg) =>{\n        var messages = [];\n        this.setState(state =>{\n          \n          messages = state.messages.map(chat =>{\n            if(chat.Id === msg.receiverId)\n            {\n              return  {Id:chat.Id,username:chat.username,path:chat.path,isTyping:chat.isTyping, isOnline:chat.isOnline,lastSeen:chat.lastSeen,status:chat.status,messages:chat.messages.map(message=>{\n                 if(msg.id===message.id)\n                 {\n                   return {sentTime:message.sentTime,id:message.id,sent:true,delivered:message.delivered,seen:message.seen,msgBody:message.msgBody,receiverId:message.receiverId,senderId:message.senderId}\n                 }  \n                 else\n                 {\n                   return {...message}\n                 }\n              }) \n             }\n            }\n            else{\n              return {...chat}\n            }\n          })\n          \n            return {messages,}\n          \n        })\n\n   }\n   const addmessage= (newmsg)=>{\n    var messages=[];\n    var temp = {};\n    let bflag=false;\n      this.setState(state =>{\n      \n        if(state.messages.length===0)\n        {\n          newmsg.msg.delivered=true;\n          messages = [{Id:newmsg.msg.senderId,username:newmsg.username,isTyping:false,path:newmsg.path,isOnline:newmsg.isOnline,status:newmsg.status,lastSeen:newmsg.lastSeen,messages:[newmsg.msg]},...state.messages]\n           this.socketDelivered.emit(\"deliverUpdate\", newmsg.msg);\n          \n        }\n        else{\n          let flag = true;\n        \n          state.messages.map((item)=>{\n            if(item.Id===newmsg.msg.senderId)\n            {  flag = false;\n              \n              if(newmsg.msg.receiverId===state.id&&!newmsg.msg.delivered)\n              { \n                 newmsg.msg.delivered=true;\n                 this.socketDelivered.emit(\"deliverUpdate\", newmsg.msg);\n                     if(state.receiver._id===newmsg.msg.senderId)\n                      {\n                        \n                            this.setState({cnt:state.cnt+1});\n                            const container = document.getElementById(\"chatScroll\");\n                            if(container.scrollHeight-container.scrollTop===container.offsetHeight)\n                            bflag=true;\n                            else{\n                              this.setState({cntifup:state.cntifup+1});\n                            } \n                        \n                      }\n                  \n              }\n\n               temp = {Id:item.Id,username:item.username,path:item.path,isOnline:newmsg.isOnline,lastSeen:item.lastSeen,isTyping:item.isTyping,status:item.status,messages:[...item.messages,newmsg.msg]}\n              \n\n            }\n            else\n            {\n              messages.push(item)\n            }\n           return 0;\n          });\n          if(flag)\n          {\n            newmsg.msg.delivered=true;\n            messages = [{Id:newmsg.msg.senderId,username:newmsg.username,path:newmsg.path,isTyping:false,isOnline:newmsg.isOnline,lastSeen:newmsg.lastSeen,status:newmsg.status,messages:[newmsg.msg]},...state.messages]\n            this.socketDelivered.emit(\"deliverUpdate\", newmsg.msg);\n          }\n          else\n          {\n            messages=[temp,...messages]\n          }\n\n        }\n       \n        return {\n          messages,\n        }\n      });\n      if(bflag)\n      this.setState({Bottom:true})\n  }\n}\n\n\npostmessage = () =>\n {   let msgid = uuidv4();\n const sentTime =  new Date();\n    \n       var newMessage = {\n         id: msgid,\n         senderId : this.state.id,\n         receiverId : this.state.receiver._id,\n         msgBody:this.state.msgBody,   \n         sentTime: sentTime,\n         sent:false,\n         delivered:false,\n         seen:false\n       }\n       var newmsg = {\n        id: msgid,\n        senderId : this.state.id,\n        receiverId : this.state.receiver._id,\n        msgBody:this.state.msgBody,\n        senderUsername:this.state.user.username,\n        senderPath:this.state.user.path, \n        senderLastSeen:this.state.user.lastSeen,\n        senderStatus:this.state.user.status,\n        senderisOnline:true,\n        sentTime :sentTime,\n        sent:false,\n        delivered:false,\n        seen:false\n      }\n      this.socketPost.emit(\"postingMessage\", newmsg);\n      \n      \n   this.setState(state =>{\n    var messages=[];\n    var temp={}\n     if(state.messages.length===0)\n     {\n       messages = [{Id:newMessage.receiverId,username:state.receiver.username,path:state.receiver.path,isTyping:this.state.receiver.isTyping,isOnline:state.receiver.isOnline,status:state.receiver.status,lastSeen:state.receiver.lastSeen,messages:[newMessage],}]\n     }\n     else\n     {\n      let flag = true;\n      state.messages.map((item)=>{\n       \n        if(item.Id===newMessage.receiverId)\n         { \n            flag = false;\n            temp = {Id:item.Id,username:item.username,path:item.path,isTyping:item.isTyping,isOnline:item.isOnline,status:item.status,lastSeen:item.lastSeen,messages:[...item.messages,newMessage]}\n         }\n         else{\n           \n           messages.push(item)\n          \n         }\n         return 0;\n       });\n       if(flag)\n       {\n        messages = [{Id:newMessage.receiverId,username:state.receiver.username,isTyping:false,isOnline:state.receiver.isOnline,path:state.receiver.path,status:state.receiver.status,lastSeen:state.receiver.lastSeen,messages:[newMessage]},...state.messages]\n       }\n       else{\n         messages.unshift(temp)\n       }\n\n     }\n     \n     return {\n       messages,msgBody:\"\"\n     }\n   });\n\n  \n\n }\n changeMsgBody = (newmsgBody) =>\n {\n   this.setState({msgBody:newmsgBody})\n   this.socketTyping.emit(\"isTyping\",{rid:this.state.receiver._id,uid:this.state.user._id});\n }\nseenInContext = (id) =>\n{\n  var messages = [];\n  this.setState(state =>{\n    \n    messages = state.messages.map(chat =>{\n      if(chat.Id === id)\n      {\n        return  {Id:chat.Id,username:chat.username,path:chat.path,isTyping:chat.isTyping, isOnline:chat.isOnline,status:chat.status,lastSeen:chat.lastSeen, messages:chat.messages.map(message=>{\n           if(!message.seen&&message.senderId===id)\n           { \n             return {sentTime:message.sentTime,id:message.id,sent:message.sent,delivered:message.delivered,seen:true,msgBody:message.msgBody,receiverId:message.receiverId,senderId:message.senderId}\n           }  \n           else\n           {\n             return {...message}\n           }\n        }) \n       }\n      }\n      else{\n        return {...chat}\n      }\n    })\n    \n      return {messages,}\n    \n  })\n}\n seenOnRoom = (msg) =>\n { this.socketSeen.emit(\"seenUpdate\",msg);\n   \n }\n currentUserUpdate = (details) => {\n   \n  \n      var messages = [];\n      if(this.state.receiver!=={}&&details._id!==this.state.receiver._id)\n      {\n        this.setState(state =>{\n    \n          messages = state.messages.map(chat =>{\n            if(chat.Id === state.receiver._id)\n            {\n              return  {Id:chat.Id,username:chat.username,path:chat.path,isTyping:chat.isTyping,isOnline:chat.isOnline,status:chat.status,lastSeen:chat.lastSeen,messages:chat.messages.map(message=>{\n                 if(!message.seen&&message.senderId===state.receiver._id)\n                 { \n                  \n                   return {sentTime:message.sentTime,id:message.id,sent:message.sent,delivered:message.delivered,seen:true,msgBody:message.msgBody,receiverId:message.receiverId,senderId:message.senderId}\n                 }  \n                 else\n                 {\n                   return {...message}\n                 }\n              }) \n             }\n            }\n            else{\n              return {...chat}\n            }\n          })\n          \n            return {messages,}\n          \n        })\n      }\n     \n\n        \n    \n      \n      this.setState({receiver:details,middleFlag:true,msgBody:\"\"})\n    \n   \n }\ntypingEnd = () =>\n{\n  this.socketTyping.emit(\"isTypingEnd\",{rid:this.state.receiver._id,uid:this.state.user._id})\n}\n\n\n  render() {\n  \n    \n    return (\n\n      \n      <UserContext.Provider value={{...this.state,updateDate:this.updateDate,handleDate:this.handleDate, updateDetail:this.updateDetail,updatemainLoading:this.updatemainLoading,typingEnd:this.typingEnd,updatecntifup:this.updatecntifup, updateUserDetail:this.updateUserDetail,updateId:this.updateId,updateSearch:this.updateSearch,currentUserUpdate:this.currentUserUpdate,changeMsgBody:this.changeMsgBody,postmessage:this.postmessage,\n        seenOnRoom:this.seenOnRoom,clearDetail:this.clearDetail,offline:this.offline,scrollUpdate:this.scrollUpdate,socketOn:this.socketOn,updateData:this.updateData,updatecnt:this.updatecnt,seenInContext:this.seenInContext,updateBottom:this.updateBottom ,onlineBottomUpdate:this.onlineBottomUpdate,updateRight:this.updateRight,updateRes:this.updateRes,updateTog:this.updateTog}}>\n\n\n  \n        {this.props.children}\n      </UserContext.Provider>\n    )\n  }\n}\n\nexport default UserContextProvider;\n"]},"metadata":{},"sourceType":"module"}